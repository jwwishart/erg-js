Backlog
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

--- TYPE SYSTEM NOTES ----------------------------------

Some type examples:
    // TODO(jwwishart) why the core.String etc? ...
    //  Answer: we might have functions of them? (Extension methods)
    //  ANSWER: 
    - string (core.String type)
    - int (core.Int type)
    - float (core.Float type)
    - decimal (core.Decimal type);
        - will be a special object for calculation of precise values like money)
    - bool (core.Boolean type)
    - any (core.Any type);
    - null ??? assignable to non primitive types only?
    - void ??? for placs where no value returned?? funcs only?

    - function (core.Function type)
        - is lambda?
        - closed over variables (Explicity ??)
        - return type list (multiple results potentially)
        - argument type list

    - struct (core.Structure type);

    - enum
        - Start off with simple enums as constants!
          essentially any use of enum value will be
          replaced in places enum is used... ?
        - only numeric types allowed OR LOOK AT RUST style enums? (java enums?)

    - array (core.Array type)
        - should be dynamic and non-dynamic type arrays?

Types should all have builting type definitions
and the keywords are just supporting specification of 
the given type definition in a keyword format.

We need to know:
    - identifier

    - is_resolved

    - default_value ???

    - is_primitive (string, int, float, bool etc);
    - is_null
    - is_void

    - is_function
    - is_struct
    - is_enum
    - is_array

    ??? are these relevant.. are the TYPE of type  
    /// value relevant (is_function etc...)?????
    
    - is_const
    - is_variable

    // This information is so we can re-try determination
    // of the type and comparison of type information
    - identifier_declaration (function, variable, struct etc)
    - scope_of_declaration (where above decl is declared)
    // So the quesiton is ... what about expressions where an identiifier is used... we would have to re-process the types for all expression parts and then re-evaluate whether the expression types match appropriately and then determine whether the expression (say a binary expression) is appropriate in the given context (say an if statement or as an argument to a function....
    SO we essentially have a bottom up parsing of the AST... to validate everything is ok??

Scenarios:
    Variable Declaration
        - The identifier is determined
        - We have type name
        - Find the TypeDefinition in the hierarchy... or in imported modules and associate
        - the type inforamation WITH the variable declaration
    Variable Declaration type inference
        - The indetnfier is determined
        - We have a constant assignment at declaration site
        - Determine the tyep and find the TypeDeclaration
    Variable Declaration with Constant assignement where const is declared after variable declaration
        - The identifier is determined
        - we have assignment of identifier
        - we can't determine the identifiers type as it is not be processed yet
        - we construct a TypeDefinition with identifier and mark it as is_resolved = false... and we assign it to the program for later processing
        - When compilation is done as much as possible we will then process the TypeDEfinition objects on the program which we will then re-try determination of the TypeDefiniitions

    Function Declaration (Same as varibles essentially)

    Assignment
        - identifier is ok
        - assigned value might be anything (expression, function call etc)
        - might not have 

        Case Example:

        result := is_this_ok("password");

        TypeDefinition would not be found for 

THIS ALL MAKES ME THINK THAT I NEED TO JUST PARSE THE THING
AND FORGET ABOUT TYPE CHECKING ERRORS AND DO IT IN A SEPARATE
PARSE AS I WILL HAVE TO DO IT FOR ALL CASES AFTER COMPILATION
ANYWAY AS I

OR I should actually maybe make the process such that I can call it from wherever at whatever time and maybe do some processing initially, but process what is remaining when I am done compiling as much as possible linearly.

This would mean that the structure of the AST should be completed by the initial parse... but the 2nd one ought to be able to fill out everything else and do VALIDATION CHECKS as if if on the initial parse and the type information is present.

--------------------------------------------------------




Variables ---
- String escape characters
- multiple line here strings style stuff.
- 

Structs ---
- 

Function ---
- multiple arguments
- any type can be parsed
- argument expressions evaluated (after general expression parsing done)
- returning reuslts
- multiple return results.


Syntax and Keywords ---
- defer
    x function calls only for statements
    - need to separate declarations and identifiers
      so that they are outside the try :oS (function
      identifiers must be outside... variables might be fine??? 
- lambda's
- closures
- using statement (any context: program, file,  function/block etc... for/if/etc blocks


Compiler Functionality ---
- type inference
- type checking
- es6 classes for structs?
- dependency system
- out of order type inference etc...


Modules ---
- a module should be a folder of erg files that should be compiled into one file or brought into the full file
- If you want to compile a program that includes multiple modules you should either have to specify the start file or have a main.erg file which is the start point for the application to build from. 
- Only imported modules or modules imported along the way will be included in the final build
- compiler options should allow specification that modules can be complied into a single file per module or into the whole application (1 file) or as separate files? How you would bring them together is another question in that last case.
- when building modules a module-exports.json file should be created which contains all exports for easy importing... it should be quick to load this into the compiler into the AST structure so that we don't have to parse the files again. a last-build.json file could have timestamps of the last time the files were compiled and whether we need to compiled them agian or not.
- 



structs enums   type checking   type checking   type checking
assign literal to var or arg { k : val } expecting a struct. must provide all non nullable properties and warn on unset nullables   type inference  type inference  delegates. DelegateNameTitleCase :: delegate (string, int) => string.  use. myvar : DelegateNameTitleCase = ---; myfunc :: (callback : DelegateNameTitleCase) { ••• }   inline func arg decl. myfunc :: (delegate (string, int) => string)... how to distinguish from inline anonymous function declaration? 
value types. declare a struct that cannot be null   struct args nullable. struct { one : String,  two? : string }   void function return type.. do soon struct methods, like go lang    string escape characters
char data type  herestrings..., @ in c# or like jon does it.            
    unions. . see how type script implements them.  myunion :: union {  x : int | float } you can only assign one of those types. .. maybe you should be able to have is_x_int : bool and is_x_float : bool.. then x_as_int : int and x_as_float : float... Instead of having to cast. .. also a x_ type : type for switches etc.   using. file level allows import of modules. using conversion; using conversion.json; this imports all functions into current space. this ought to be able to be done at ANY SCOPE I.e. in a block have a using to import one module into that block.  you should even be able to just import a single function or struct etc.  this incluses function scope etc. enums could be impoerted into a block of a function without polutong everything putside it... this is clpse to context imports.... reduces clutter at top of file and maintaining it. should be able to go #using git "git@github.com" ...style import and it should be downloaded an built if it is an erg program build.erg file ar root.    functions can be defined like extension methods in c# and they should be callable like functions or as methods off of an iddntifier of said type... parseint :: (arg : this string) int.  . called like parseint(150) or "134".parseint() or mystr.parseint ()... static type helpers might be good... int.parse() where int is the class Int... declaration would be parse :: (arg : string) this int  then int.parse ("1849") would be valid. where the this is is where iit is associated. maybe attach-to might be better... I.e. a more descriptive keyword.   I
out of order type inference... I.e. struct declared after first lexical use.typescript uses bottom up inference normally then top down. might need to iterate ast and filk in info latter as simplest solution....              










// Type Definition
//


Person StructDefinition
    FieldList
        FieldDefinition
            Identifier
            TypeDefinition
                identifier
                is_primitive
                is_Resovled = false;

            // THIS TRIGGERS RESOLUTION ENTRY IN TABLE

RESOLUTION ENTRY TABLE
    - DEFAULT_AGE
    - point to TypeDefinition in above hierarchy


when DEFAULT_AGE is processed we come back at some point
and find the TypeDefinition in STruct field in the RESOLUTION ENTRY TABLE
and we can then resolve it and REPLACE the type with the one we
found by re-calling type_resolution() or something???




/*
    Type checking resolution table (per scope?)
    - Person  well IS it waiting???
    - DEFAULT_AGE - waiting (scope is struct)


    // DEFAULT_AGE is done

    type check each
        - Person. not 
 */


/*
    We want to store the type definition information at the top of the scope
    where the type (whatever it is is defined.

    Below we have a Person struct.
    It should have a TypeDefinition with identifier of "Person", null able for default value
    non primitive with is_struct

    We are missing the DEFAULT_AGE constant because it is declared later in the file...

    Even though we know the structure of the Person, we still are missing something... we
    don't know the default value of 'age'... so we need to defer it to the 2nd pass...

    We would record the Person structure as is_resolved = false as it is not complete... but we would also 
    have a DEFAULT_AGE identifier with a TypeDefinition of integer

 */
Person :: struct {
    name : string,
    age  : int = DEFAULT_AGE
}


DEFAULT_AGE :: 18;


/*

    As we are parsing Person we would end up registering Person as Not-REsolved... it would need to 



 */

/*

 FurtherPassObjects:
    - Identifier = Person
    - is_struct = true
    - is_resolved = false
    - declaration  = ast node for struct Struct
    - Scope (where the StructDeclaration resides) i.e. in the statements
    - dependent_on: [
        FurtherPassObjects:
              THE IDENTIFER ASSIGNED
            - identifier: DEFAULT_AGE
            - is_primitive: true,
            - is_resolved = false,
            - Scope (struct ??? recursive???)
            - dependent_on: [
                //// THIS IS WHERE WE ARE STUCK! We can't see DEFAULT_AGE yet!
            ]
    ]


we would keep parsing and see DEFAULT_AGE...
we could either (at this point) go and see if we can find anything that 
matches or do it in another parse....

we would recurse the array and tree of dependents to find any use of the identifier DEFAULT_AGE
in this case we would just go to the scope (file in this case) and look at the further parse FurtherPassObjects
recursing the structure... we could then find the bottom most items and fill in things
- finds the identifier: DEFAULT_AGE in assignment
- We could either replace the assignment expression rhs with a literal or 
  the identifier for the constant as it is in the current scope.
- 

If there is no use in the current scope then the only other issue we need to worry about
is that the constant or type etc might be used somewhere else... in that case
the other file would require that THIS file was compiled first...
HEREIN LIES ISSUES WITH CIRCULAR DEPENDENCIES :oS

FILE/PACKAGE DEPENDENCIES (both, keep with one???)
Suggested approach is to:
- parse the file looking for 
  #using package;
  #using "another-package"

- construct a dependency graph of dependent files
- ensure there is not circular reference anywhere 
    - no package can reference itself
    - no package can reference itself via any other package
- start compilation at the leafs first (doing all bottom most leaves recursively) then
  moving UP the tree to the next level

SCOPE/FILE BASED LEXICAL DEPENDENCIES
- while parsing file keep track of items that are not fully resolved
  - referrene to the scope the item is in (scope, file, structure decl, variable decl)
  - some sort of information about where the item is that we are trying to determine the type for ...
    THIS BIT IS COMPLICATED IT SEEMS!!!!!! we need to say, hey we have a FunctionCall, so 
    iterate all the arguments till we find it, check the return type (regardless in case the type
    is the same) and if so what do we do then? set the Type information and verify the type 
    information is correct... how 

    HOW do we tell the process to go back up the list of type thingies that still need processing?

    We need is_resolved on everything?
    Should everything be an AstNode with is_resolved on it? Maybe...

    Do we need a visitor of some sort that can just iterate through the whole ast
    and figure out what is not set... do we just put the AST nodes that are not resolved
    into an array and call the visitor on each of those

    VISITOR
        would parse function by
            - next() visitor method would reutrn the following for each call
                - first arguments first expression
                - first arguments second expression 
                    first arguments second expression (which is an identifier) 
                       first arugments econd exxpression type definition (function)
                           ???? do we keep going? at what point do we stop... I think
                           we need to stop when we have reached the bottom and then we can recurse up

                           otherwise we will not fully resolve everything that we need to know potentially aboute everything 


                           :oS






*/