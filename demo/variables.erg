/* TODO
- ERROR CASES: bottom of file.
- identifier already defined in scope, cannot re-declare variable
- type mistmatch (num : int = "boo")
- constants. num : const int = 15; // must be initialized must match type
- any can be assigned anything.. null by default (null reference vs literals??? boxing?
*/

// Type Specified - No Assignment (default values assigned)
type_string : string;   // Should be ''
type_int    : int;      // Should be 0 (zero)
type_float  : float;    // Should be 0.0 (zero)
type_bool   : bool;     // should be false
type_any    : any;      // should be null


// Type Specified - Uninitialized (defaults values assigned ... this
// JavaScript target would not support this type of construct)
type_string_explicity_uninitialized : string = ---;
type_int_explicity_uninitialized    : int = ---;
type_float_explicity_uninitialized  : float = ---;
type_bool_explicity_uninitialized   : bool = ---;
type_any_explicity_uninitialized    : any = ---;


// Type Specified - Initialized
type_string_assigned : string = "Hello World";
type_string_assigned2 : string = "Don't Sweat the single Quotes";
type_int_assigned : int = 256;
type_float_assigned : float = 1.5670
type_bool_assigned : bool = true;

// Type Not Specified - Initialized
no_type_string_init := "Hello World";
no_type_string_init2 := "Don't Sweat the single Quotes";
no_type_int_init := 256;
no_type_float_init := 1.5670
no_type_bool_init := true;


// Constants
const1 :: 15;
const2 :: "This is great!";


// Re-Assignment
type_string = "Welcome";
type_int    = 1234;
type_float  = 1234.5678;
type_bool   = true;
type_any    = "I'll just set as a string for the moment!";
type_any    = null;



/*** ERROR CASES **************************************************************
type_any = ; // you can't assign nothing!
const1 = 17; // this should error as const1 is defined and is a 'const' type
me_no_exist = "now it has a non-default value"; // variable name doesn't exist... 
message := "what?"; // should fail because variable exists
message := "what?" // no semicolon!
type_string_assignment_but_no_value  := ; // no value assigned!
type_string_assignment_but_no_value2 : string = ; // no value assigned!
you_cant_do_this := ---; // you should have a literal or expression as there is not type and we can't infer the type!
type_string = false; // type_string is a string. You can't assign a boolean value
*/

