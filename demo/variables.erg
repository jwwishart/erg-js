/* TODO
- ERROR CASES: bottom of file.
- identifier already defined in scope, cannot re-declare variable
- type mistmatch (num : int = "boo")
- constants. num : const int = 15; // must be initialized must match type
- any can be assigned anything.. null by default (null reference vs literals??? boxing?


- Use of an identifier in an outer scope in an inner scope is fine! just not in the same scope!
    depends on: functions, sub-scopes

*/

// Type Specified - No Assignment (default values assigned)
type_string : string;   // Should be ''
type_int    : int;      // Should be 0 (zero)
type_float  : float;    // Should be 0.0 (zero)
type_bool   : bool;     // should be false
type_any    : any;      // should be null


// Type Specified - Uninitialized (defaults values assigned ... this
// JavaScript target would not support this type of construct)
type_string_explicity_uninitialized : string = ---;
type_int_explicity_uninitialized    : int = ---;
type_float_explicity_uninitialized  : float = ---;
type_bool_explicity_uninitialized   : bool = ---;
type_any_explicity_uninitialized    : any = ---;


// Type Specified - Initialized
type_string_assigned : string = "Hello World";
type_string_assigned2 : string = "Don't Sweat the single Quotes";
type_int_assigned : int = 256;
type_float_assigned : float = 1.5670
type_bool_assigned : bool = true;

// Type Not Specified - Initialized
no_type_string_init := "Hello World";
no_type_string_init2 := "Don't Sweat the single Quotes";
no_type_int_init := 256;
no_type_float_init := 1.5670
no_type_bool_init := true;


// Constants
const1 :: 15;
const2 :: "This is great!";


// Re-Assignment
type_string = "Welcome";
type_int    = 1234;
type_float  = 1234.5678;
type_bool   = true;
type_any    = "I'll just set as a string for the moment!";
type_any    = null;


// Re-Assignment of any type to an 'any' type
type_any = "welcome home";
type_any = 1;
type_any = 1.234;
type_any = true;


// Negatives...


// TODO(jwwishart)
// - const are not allowed to be changed (no assignment)
// - declaration assignment type matches explicit type
// - assignment statement assigned type matches the variable type
// - null only assignable to 'any' type.


/*** ERROR CASES **************************************************************

-- VERIFIED ERROR CONDITIONS ---- the following items have been verified as working

// ERROR: you cannot change the value of a const!
my_const :: 15;
my_const = 256


// ERROR: duplicate declaration of identifier in the same scope!
// NOTE(jwwishart) type is irrelevant... identifier is not allowed ...
//  to be re-declared in the SAME scope!
my_var := 15;
my_var : string = "Noooo!";


// ERROR: should not work as 15 is a numeric literal and we expect a string
my_string : string = 15;


// ERROR: cannot assign to undeclared identifier
my_var = 12;


// ERROR: no value assigned in variable declaration
type_string_assignment_but_no_value  := ;
type_string_assignment_but_no_value2 : string = ;

// ERROR: you must provide a type with an explicity uninitialized variable declaration
you_cant_do_this := ---;


// ERROR: the declarations should be fine... the assignments are ALL wrong
a_str   : string;   // Should be ''
an_int  : int;      // Should be 0 (zero)
a_float : float;    // Should be 0.0 (zero)
a_bool  : bool;     // should be false
an_any  : any;      // should be null

//a_str   = 1235;
//an_int  = 12.2414;
//a_float = true;
//a_bool  = "woo hooo";

an_any  = null;
//a_str   = null;
//an_int  = null;
//a_float = null;
//a_bool  = null;




-- TODO ---- the following have not been actioned


// TODO: what if there is no semicolon? but also no operator after the literal?
message := "what?" // no semicolon!

*/

