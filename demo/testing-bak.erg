print("start of " + #filename);
defer print("end of " + #filename);


print_uppercase :: (str: string) {
    asm {
        console.log(str.toUpperCase());
    }
}

dump_code_file :: (filename : string) {
    print("\n\nSTART OF " + #filename + " contents");
    defer print("\n\nEND OF " + #filename + " contents");

    content : string;

    asm {
        // So the code works in the browser
        if (global.document) {
            var codeTextArea = document.getElementById("code");
            console.log(codeTextArea.value);
            return;
        }

        // NODE! Read THIS file and output it to the console
        var fs = require('fs');
        var path = require('path');

        function get_file_contents(path) {
            return fs.readFileSync(path, { encoding: 'utf-8' });
        }

        contents = get_file_contents(filename);

        console.log(contents);
    }

    // TODO(jwwishart) this doesn't work... as the 'contents' variable
    // above is not part of the compiled code.... how would we 
    // deal with this? I think this should just NOT be possible!! :oS
    // print(contents);
    return content;
}

// @BUG these two statements hit the "The type determination code is not that great" error for the following two items :o(
//print(dump_code_file(#filename));
//defer print(dump_code_file(#filename));

result_of_dump_code_file : string = dump_code_file(#filename);
print(result_of_dump_code_file);

// Try calling with literal and directive
print_uppercase("Compiling File: " + #filename);


// Try using variable declaration types prefixed to the filename
prefix1 := "Prefix 1: ";
prefix2 : string = "Prefix 2: ";
prefix3 : string;

prefix3 = "Prefix 3: ";

print_uppercase(prefix1 + #filename);
print_uppercase(prefix2 + #filename);
print_uppercase(prefix3 + #filename);


// Try different ordering... declaration and string literal
print_uppercase(#filename + " is being compiled...");

dump_code_file(#filename);